# Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

    # 2^2=4, 2^3=8, 2^4=16, 2^5=32
    # 3^2=9, 3^3=27, 3^4=81, 3^5=243
    # 4^2=16, 4^3=64, 4^4=256, 4^5=1024
    # 5^2=25, 5^3=125, 5^4=625, 5^5=3125

# If they are then placed in numerical order, with any repeats removed, we
 # get the following 
# sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by a^b for 
# 2 <= a < 100 and 2 <= b <= 100? 

class SortedList(object):
	
	def __init__(self, list):
		self.list = []
		for i in list:
			self.add(i)

	
	def add(self, n):
		if len(self.list) == 0 or n > self.list[-1]:
			self.list.append(n)
			return 1
	
		a = 0
		b = len(self.list) - 1
		
		while True:
			i = (a + b)//2
					
			if a == i:#a+1 == b
				if self.list[a] > n:
					self.list.insert(a, n)
					return 1
				else:
					self.list.insert(a+1, n)
					return 1
					
			di = n - self.list[i]
			
			if di == 0:
				return 0
			if di > 0:
				a = i
			else:
				b = i
		
		
	def __contains__(self, n):
		if len(self.list) == 0 or n < self.list[0] or n > self.list[-1]:
			return False
			
		if n == self.list[-1]:
			return True
			
		a = 0
		b = len(self.list) - 1
		
		while True:
			i = (a + b)//2
			
			if a == i:
				return n == self.list[a]
				
			di = n - self.list[i]
			
			if di == 0:
				return True
			if di > 0:
				a = i
			else:
				b = i
		
		
	def size(self):
		return len(self.list)
		

		
		
# ******************************************************************************
list = SortedList([])
	
for a in range(2,101):
	for b in range(2,101):
		list.add(a**b)
		
print(list.size())












